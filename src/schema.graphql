type JWT @jwt {
    id: String
    roles: [String]
}
type User
    @authorization(
        validate: [
            { where: { node: { userId: "$jwt.id" } }, operations: [READ] }
            { where: { jwt: { roles_INCLUDES: "overlord" } } }
        ]
    ) {
    userId: String! @unique
    adminAccess: [Tenant!]! @relationship(type: "ADMIN_IN", direction: OUT)
}


type Tenant
    @authorization(
        validate: [
            { where: { node: { admins: { userId: "$jwt.id" } } } }
            { where: { jwt: { roles_INCLUDES: "overlord" } } }
        ]
    ) {
    id: ID! @id
    settings: Settings! @relationship(type: "HAS_SETTINGS", direction: OUT)
    admins: [User!]! @relationship(type: "ADMIN_IN", direction: IN)
}


type Settings {
    id: ID! @id
    tenant: Tenant! @relationship(type: "HAS_SETTINGS", direction: IN)
    openingDays: [OpeningDay!]! @relationship(type: "VALID_OPENING_DAYS", direction: OUT)
    name: String
    updatedBy: String @populatedBy(callback: "getUserIDFromContext", operations: [CREATE, UPDATE])
}

type OpeningDay
    @authorization(
        validate: [
        {  where: { node: {settings: { tenant: { admins: { userId: "$jwt.id" } } } } } }
        { where: { jwt: { roles_INCLUDES: "overlord" } } }
    ]
    ) {
    id: ID! @id
    settings: Settings @relationship(type: "VALID_OPENING_DAYS", direction: IN)
    name: String
    updatedBy: String @populatedBy(callback: "getUserIDFromContext", operations: [CREATE, UPDATE])
}
